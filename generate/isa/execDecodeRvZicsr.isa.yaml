- instruction: csrrw 
  decode: |
    useRS1;
    useRD;
    useCSR;
  execute: |
    if (core.regs[rd] == 0) {
        core.CSRs[csr] = core.regs[rs1];
        (curI + 1)->exec(core, bbsI, curI + 1);
        return;
        //return Fault::NO_FAULT;    
    }
    reg_t tmp = core.CSRs[csr];
    core.CSRs[csr] = core.regs[rs1];
    core.regs[rd] = tmp;


- instruction: csrrs
  decode: |
    useRS1;
    useRD;
    useCSR;
  execute: |
    reg_t tmp = core.CSRs[csr];
    core.CSRs[csr] = tmp | core.regs[rs1];
    core.regs[rd] = tmp;


- instruction: csrrc
  decode: |
    useRS1;
    useRD;
    useCSR;
  execute: |
    reg_t tmp = core.CSRs[csr];
    core.CSRs[csr] = tmp & ~core.regs[rs1];
    core.regs[rd] = tmp;


- instruction: csrrwi
  decode: |
    assign(imm, ZIMM);
    useRD;
    useCSR;
  execute: |
    /*if (isntr.rd != 0)*/
    core.regs[rd] = core.CSRs[csr];
    core.CSRs[csr] = imm;


- instruction: csrrsi
  decode: |
    assign(imm, ZIMM);
    useRD;
    useCSR;
  execute: |
    reg_t tmp = core.CSRs[csr];
    core.CSRs[csr] = tmp | imm;
    core.regs[rd] = tmp;


- instruction: csrrci
  decode: |
    assign(imm, ZIMM);
    useRD;
    useCSR;
  execute: |
    reg_t tmp = core.CSRs[csr];
    core.CSRs[csr] = tmp & ~imm;
    core.regs[rd] = tmp;