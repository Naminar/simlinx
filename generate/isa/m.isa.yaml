- instruction: mul
  decode: |
    decodedInstr.rs2 = RS2;
    decodedInstr.rs1 = RS1;
    decodedInstr.rd = RD;
  execute: |
    core.regs[instr.rd] = core.regs[instr.rs1] * core.regs[instr.rs2];


- instruction: mulh
  decode: |
    decodedInstr.rs2 = RS2;
    decodedInstr.rs1 = RS1;
    decodedInstr.rd = RD;
  execute: |
    core.regs[instr.rd] = (uint64_t)
                            (
                              ( sextDoubleSize<uint128_t, uint64_t>(core.regs[instr.rs1]) 
                                * 
                                sextDoubleSize<uint128_t, uint64_t>(core.regs[instr.rs2])
                              ) >> 64
                            );


- instruction: mulhsu
  decode: |
    decodedInstr.rs2 = RS2;
    decodedInstr.rs1 = RS1;
    decodedInstr.rd = RD;
  execute: |
    core.regs[instr.rd] = (uint64_t)
                            (
                              ( sextDoubleSize<uint128_t, uint64_t>(core.regs[instr.rs1]) 
                                * 
                                (uint128_t)(core.regs[instr.rs2])
                              ) >> 64
                            );


- instruction: mulhu
  decode: |
    decodedInstr.rs2 = RS2;
    decodedInstr.rs1 = RS1;
    decodedInstr.rd = RD;
  execute: |
    core.regs[instr.rd] = (uint64_t)
                            (
                              ( (uint128_t)(core.regs[instr.rs1]) 
                                * 
                                (uint128_t)(core.regs[instr.rs2])
                              ) >>64
                            );


- instruction: div
  decode: |
    decodedInstr.rs2 = RS2;
    decodedInstr.rs1 = RS1;
    decodedInstr.rd = RD;
  execute: |
    if (core.regs[instr.rs2] == 0ULL) {
      core.regs[instr.rd] = (uint64_t)-1LL;
    } else if (core.regs[instr.rs1] == 1ULL << 63 && core.regs[instr.rs2] == -1ULL) {
      core.regs[instr.rd] = 1ULL << 63;
    } else
      core.regs[instr.rd] = (int64_t)core.regs[instr.rs1] / (int64_t)core.regs[instr.rs2];


- instruction: divu
  decode: |
    decodedInstr.rs2 = RS2;
    decodedInstr.rs1 = RS1;
    decodedInstr.rd = RD;
  execute: |
    if (core.regs[instr.rs2] == 0ULL) {
      core.regs[instr.rd] = (uint64_t)-1LL;
    } else
      core.regs[instr.rd] = core.regs[instr.rs1] / core.regs[instr.rs2];


- instruction: rem
  decode: |
    decodedInstr.rs2 = RS2;
    decodedInstr.rs1 = RS1;
    decodedInstr.rd = RD;
  execute: |
    if (core.regs[instr.rs2] == 0ULL) {
      core.regs[instr.rd] = core.regs[instr.rs1];
    } else if (core.regs[instr.rs1] == 1ULL << 63 && core.regs[instr.rs2] == -1ULL) {
      core.regs[instr.rd] = 0ULL;
    } else
      core.regs[instr.rd] = (int64_t)core.regs[instr.rs1] % (int64_t)core.regs[instr.rs2];


- instruction: remu
  decode: |
    decodedInstr.rs2 = RS2;
    decodedInstr.rs1 = RS1;
    decodedInstr.rd = RD;
  execute: |
    if (core.regs[instr.rs2] == 0ULL) {
      core.regs[instr.rd] = core.regs[instr.rs1];
    } else
      core.regs[instr.rd] = core.regs[instr.rs1] % core.regs[instr.rs2];


- instruction: mulw
  decode: |
    decodedInstr.rs2 = RS2;
    decodedInstr.rs1 = RS1;
    decodedInstr.rd = RD;
  execute: |
    core.regs[instr.rd] = sext<64,32>(core.regs[instr.rs1] * core.regs[instr.rs2]);


- instruction: divw
  decode: |
    decodedInstr.rs2 = RS2;
    decodedInstr.rs1 = RS1;
    decodedInstr.rd = RD;
  execute: |
    if (core.regs[instr.rs2] == 0ULL) {
      core.regs[instr.rd] = (uint64_t)-1LL;
    } else if (bitsFrom(core.regs[instr.rs1], 31, 0) == 1ULL << 31 && bitsFrom(core.regs[instr.rs2], 31, 0) == ((1ULL<<32) - 1)) {
      core.regs[instr.rd] = -1ULL << 31;
    } else
      core.regs[instr.rd] = sext<64,32>((int32_t)core.regs[instr.rs1] /(int32_t)core.regs[instr.rs2]);


- instruction: divuw
  decode: |
    decodedInstr.rs2 = RS2;
    decodedInstr.rs1 = RS1;
    decodedInstr.rd = RD;
  execute: |
    if (core.regs[instr.rs2] == 0ULL) {
      core.regs[instr.rd] = (uint64_t)-1LL;
    } else {
    core.regs[instr.rd] = sext<64,32>(bitsFrom(core.regs[instr.rs1], 31, 0) / bitsFrom(core.regs[instr.rs2], 31, 0));
    }


- instruction: remw
  decode: |
    decodedInstr.rs2 = RS2;
    decodedInstr.rs1 = RS1;
    decodedInstr.rd = RD;
  execute: |
    reg_t src1 = bitsFrom(core.regs[instr.rs1], 31, 0);
    reg_t src2 = bitsFrom(core.regs[instr.rs2], 31, 0);
    if (src2 == 0ULL) {
      core.regs[instr.rd] = sext<64,32>(src1);
    } else if (src1 == (1ULL << 31) && src2 == ((1ULL<<32) - 1)) {
      core.regs[instr.rd] = 0ULL;
    } else
      core.regs[instr.rd] = sext<64,32>((int32_t)src1 % (int32_t)src2);


- instruction: remuw
  decode: |
    decodedInstr.rs2 = RS2;
    decodedInstr.rs1 = RS1;
    decodedInstr.rd = RD;
  execute: |
    reg_t src1 = bitsFrom(core.regs[instr.rs1], 31, 0);
    reg_t src2 = bitsFrom(core.regs[instr.rs2], 31, 0);
    if (src2 == 0ULL) {
      core.regs[instr.rd] = sext<64,32>(src1);
    } else
      core.regs[instr.rd] = sext<64,32>(src1 % src2);