- instruction: lui
  decode: |
    assign(imm, IMM20);;
    useRD;
  execute: |
    core.regs[rd] = sext<20>(imm) << 12;


- instruction: auipc
  decode: |
    assign(imm, IMM20);;
    useRD;
  execute: |
    core.regs[rd] = core.pc_reg + (sext<20>(imm) << 12);


- instruction: jal
  decode: |
    useRD;
    decodedInstr.imm = bitsFrom(decodedBits,  31,  31) << 20
                          | bitsFrom(decodedBits, 19, 12) << 12
                          | bitsFrom(decodedBits, 20, 20) << 11
                          | bitsFrom(decodedBits, 30, 21) << 1;
  execute: |
    core.regs[rd] = core.pc_reg + 4;
    core.pc_reg += sext<21>(imm);


- instruction: jalr
  decode: |
    useRD;
    useRS1;
    assign(imm, IMM12);
  execute: |
    reg_t tmp = core.pc_reg + 4;
    core.pc_reg = (core.regs[rs1] + sext<12>(imm)) &  ~1U;
    core.regs[rd] = tmp;


- instruction: beq
  decode: |
    useRS1;
    useRS2;
    decodedInstr.imm = bitsFrom(decodedBits, 7, 7) << 11
                        | bitsFrom(decodedBits, 11, 8) << 1
                        | bitsFrom(decodedBits, 30, 25) << 5
                        | bitsFrom(decodedBits, 31, 31) << 12;
  execute: |
    core.pc_reg += (core.regs[rs1] == core.regs[rs2])? sext<13>(imm) : 4U;


- instruction: bne
  decode: |
    useRS1;
    useRS2;
    decodedInstr.imm = bitsFrom(decodedBits, 7, 7) << 11
                        | bitsFrom(decodedBits, 11, 8) << 1
                        | bitsFrom(decodedBits, 30, 25) << 5
                        | bitsFrom(decodedBits, 31, 31) << 12;
  execute: |
    core.pc_reg += (core.regs[rs1] != core.regs[rs2])? sext<13>(imm) : 4U;


- instruction: blt
  decode: |
    useRS1;
    useRS2;
    decodedInstr.imm = bitsFrom(decodedBits, 7, 7) << 11
                        | bitsFrom(decodedBits, 11, 8) << 1
                        | bitsFrom(decodedBits, 30, 25) << 5
                        | bitsFrom(decodedBits, 31, 31) << 12;
  execute: |
    core.pc_reg += (asSigned(core.regs[rs1]) < asSigned(core.regs[rs2]))? sext<13>(imm) : 4U;


- instruction: bge
  decode: |
    useRS1;
    useRS2;
    decodedInstr.imm = bitsFrom(decodedBits, 7, 7) << 11
                        | bitsFrom(decodedBits, 11, 8) << 1
                        | bitsFrom(decodedBits, 30, 25) << 5
                        | bitsFrom(decodedBits, 31, 31) << 12;
  execute: |
    core.pc_reg += (asSigned(core.regs[rs1]) >= asSigned(core.regs[rs2]))? sext<13>(imm) : 4U;


- instruction: bltu
  decode: |
    useRS1;
    useRS2;
    decodedInstr.imm = bitsFrom(decodedBits, 7, 7) << 11
                        | bitsFrom(decodedBits, 11, 8) << 1
                        | bitsFrom(decodedBits, 30, 25) << 5
                        | bitsFrom(decodedBits, 31, 31) << 12;
  execute: |
    core.pc_reg += (core.regs[rs1] < core.regs[rs2])? sext<13>(imm) : 4U;


- instruction: bgeu
  decode: |
    useRS1;
    useRS2;
    decodedInstr.imm = bitsFrom(decodedBits, 7, 7) << 11
                        | bitsFrom(decodedBits, 11, 8) << 1
                        | bitsFrom(decodedBits, 30, 25) << 5
                        | bitsFrom(decodedBits, 31, 31) << 12;
  execute: |
    core.pc_reg += (core.regs[rs1] >= core.regs[rs2])? sext<13>(imm) : 4U;


- instruction: lb
  decode: |
    useRS1;
    useRD;
    assign(imm, IMM12);
  execute: |
    core.regs[rd] = sext<8>(
                              bitsFrom(core.load<uint64_t>(core.regs[rs1] + sext<12>(imm)), 7, 0)
                            );


- instruction: lh
  decode: |
    useRS1;
    useRD;
    assign(imm, IMM12);
  execute: |
    core.regs[rd] = sext<16>(
                              bitsFrom(core.load<uint64_t>(core.regs[rs1] + sext<12>(imm)), 15, 0)
                            );


- instruction: lw
  decode: |
    useRS1;
    useRD;
    assign(imm, IMM12);
  execute: |
    core.regs[rd] = sext<32>(
                              bitsFrom(core.load<uint64_t>(core.regs[rs1] + sext<12>(imm)), 31, 0)
                            );


- instruction: ld
  decode: |
    useRS1;
    useRD;
    assign(imm, IMM12);
  execute: |
    core.regs[rd] = core.load<uint64_t>(core.regs[rs1] + sext<12>(imm));


- instruction: lbu
  decode: |
    useRS1;
    useRD;
    assign(imm, IMM12);
  execute: |
    core.regs[rd] = bitsFrom(core.load<uint64_t>(core.regs[rs1] + sext<12>(imm)), 7, 0);


- instruction: lhu
  decode: |
    useRS1;
    useRD;
    assign(imm, IMM12);
  execute: |
    core.regs[rd] = bitsFrom(core.load<uint64_t>(core.regs[rs1] + sext<12>(imm)), 15, 0);


- instruction: sb
  decode: |
    useRS1;
    useRS2;
    decodedInstr.imm = IMM12HI << 5 | IMM12LO;
  execute: |
    core.store<uint8_t>(core.regs[rs1] + sext<12>(imm), bitsFrom(core.regs[rs2], 7, 0));


- instruction: sh
  decode: |
    useRS1;
    useRS2;
    decodedInstr.imm = IMM12HI << 5 | IMM12LO;
  execute: |
    core.store<uint16_t>(core.regs[rs1] + sext<12>(imm), bitsFrom(core.regs[rs2], 15, 0));


- instruction: sw
  decode: |
    useRS1;
    useRS2;
    decodedInstr.imm = IMM12HI << 5 | IMM12LO;
  execute: |
    core.store<uint32_t>(core.regs[rs1] + sext<12>(imm), bitsFrom(core.regs[rs2], 31, 0));


- instruction: sd
  decode: |
    useRS1;
    useRS2;
    decodedInstr.imm = IMM12HI << 5 | IMM12LO;
  execute: |
    core.store<uint64_t>(core.regs[rs1] + sext<12>(imm), bitsFrom(core.regs[rs2], 63, 0));


- instruction: addi
  decode: |
    assign(imm, IMM12);
    useRS1;
    useRD;
  execute: |
    core.regs[rd] = core.regs[rs1] + sext<12>(imm);


- instruction: slti
  decode: |
    assign(imm, IMM12);
    useRS1;
    useRD;
  execute: |
    core.regs[rd] = asSigned(core.regs[rs1]) < asSigned(sext<12>(imm));

- instruction: sltiu
  decode: |
    assign(imm, IMM12);
    useRS1;
    useRD;
  execute: |
    core.regs[rd] = core.regs[rs1] < sext<12>(imm);


- instruction: xori
  decode: |
    assign(imm, IMM12);
    useRS1;
    useRD;
  execute: |
    core.regs[rd] = core.regs[rs1] ^ sext<12>(imm);


- instruction: ori
  decode: |
    assign(imm, IMM12);
    useRS1;
    useRD;
  execute: |
    core.regs[rd] = core.regs[rs1] | sext<12>(imm);

- instruction: andi
  decode: |
    assign(imm, IMM12);
    useRS1;
    useRD;
  execute: |
    core.regs[rd] = core.regs[rs1] & sext<12>(imm);


- instruction: add
  decode: |
    useRS1;
    useRS2;
    useRD;
  execute: |
    core.regs[rd] = core.regs[rs1] + core.regs[rs2];


- instruction: sub
  decode: |
    useRS1;
    useRS2;
    useRD;
  execute: |
    core.regs[rd] = core.regs[rs1] - core.regs[rs2];


- instruction: sll
  decode: |
    useRS1;
    useRS2;
    useRD;
  execute: |
    core.regs[rd] = core.regs[rs1] << core.regs[rs2];


- instruction: slt
  decode: |
    useRS1;
    useRS2;
    useRD;
  execute: |
    core.regs[rd] = asSigned(core.regs[rs1]) < asSigned(core.regs[rs2]);


- instruction: sltu
  decode: |
    useRS1;
    useRS2;
    useRD;
  execute: |
    core.regs[rd] = core.regs[rs1] < core.regs[rs2];


- instruction: xor
  decode: |
    useRS1;
    useRS2;
    useRD;
  execute: |
    core.regs[rd] = core.regs[rs1] ^ core.regs[rs2];


- instruction: srl
  decode: |
    useRS1;
    useRS2;
    useRD;
  execute: |
    core.regs[rd] = core.regs[rs1] >> core.regs[rs2];


- instruction: sra
  decode: |
    useRS1;
    useRS2;
    useRD;
  execute: |
    core.regs[rd] = asSigned(core.regs[rs1]) >> core.regs[rs2];


- instruction: or
  decode: |
    useRS1;
    useRS2;
    useRD;
  execute: |
    core.regs[rd] = core.regs[rs1] | core.regs[rs2];


- instruction: and
  decode: |
    useRS1;
    useRS2;
    useRD;
  execute: |
    core.regs[rd] = core.regs[rs1] & core.regs[rs2];


- instruction: fence
  decode: |
  execute: |


- instruction: ecall
  isEBB: true
  updateCoreState: true
  decode: |
  execute: |
    core.fault = ::Syscall::syscalls[core.regs[simlinx::Core::Register::a7]](core);


- instruction: ebreak
  decode: |
  execute: |


- instruction: addiw
  decode: |
    assign(imm, IMM12);
    useRS1;
    useRD;
  execute: |
    core.regs[rd] = sext<32>(bitsFrom(core.regs[rs1] + sext<12>(imm), 31, 0));


- instruction: addw
  decode: |
    useRS2;
    useRS1;
    useRD;
  execute: |
    core.regs[rd] = sext<32>(bitsFrom(core.regs[rs1] + core.regs[rs2], 31, 0));


- instruction: slli
  decode: |
    assign(imm, IMM6); // RV64 mode
    useRS1;
    useRD;
  execute: |
    core.regs[rd] = core.regs[rs1] << imm;


- instruction: slliw
  decode: |
    assign(imm, IMM5);
    useRS1;
    useRD;
  execute: |
    core.regs[rd] = sext<32>(bitsFrom(core.regs[rs1] << imm, 31, 0));


- instruction: srli
  decode: |
    assign(imm, IMM5);
    useRS1;
    useRD;
  execute: |
    core.regs[rd] = core.regs[rs1] >> imm;


- instruction: srliw
  decode: |
    assign(imm, IMM5);
    useRS1;
    useRD;
  execute: |
    core.regs[rd] = sext<32>(bitsFrom(core.regs[rs1], 31, 0) >> imm);

- instruction: srai
  decode: |
    assign(imm, IMM6); // RV64 mode
    useRS1;
    useRD;
  execute: |
    core.regs[rd] = asSigned(core.regs[rs1]) >> imm;

- instruction: sraiw
  decode: |
    assign(imm, IMM5);
    useRS1;
    useRD;
  execute: |
    core.regs[rd] = sext<32>(asSigned<int32_t>(core.regs[rs1]) >> imm);


- instruction: subw
  decode: |
    useRS2;
    useRS1;
    useRD;
  execute: |
    core.regs[rd] = sext<32>(bitsFrom(core.regs[rs1] - core.regs[rs2], 31, 0));


- instruction: sllw
  decode: |
    useRS2;
    useRS1;
    useRD;
  execute: |
    core.regs[rd] = sext<32>(bitsFrom(core.regs[rs1] << bitsFrom(core.regs[rs2], 4, 0), 31, 0));


- instruction: srlw
  decode: |
    useRS2;
    useRS1;
    useRD;
  execute: |
    core.regs[rd] = sext<32>(bitsFrom(core.regs[rs1], 31, 0) >> bitsFrom(core.regs[rs2], 4, 0));


- instruction: sraw
  decode: |
    useRS2;
    useRS1;
    useRD;
  execute: |
    core.regs[rd] = sext<32>(asSigned<int32_t>(core.regs[rs1]) >> bitsFrom(core.regs[rs2], 4, 0));


- instruction: lwu
  decode: |
    useRS1;
    useRD;
    assign(imm, IMM12);
  execute: |
    core.regs[rd] = core.load<uint32_t>(core.regs[rs1] + sext<12>(imm));


- instruction: mret
  decode: ""
  execute: ""