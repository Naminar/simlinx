{
  "lui": {
    "decode": "
      decodedInstr.imm = IMM20;
      decodedInstr.rd = RD;
    ",
    "execute": "
      core.regs[instr.rd] = sext<20>(instr.imm) << 12;
    "
  },
  "auipc": {
    "decode": "
      decodedInstr.imm = IMM20;
      decodedInstr.rd = RD;
    ",
    "execute": "
    core.regs[instr.rd] = core.pc_reg + sext<20>(instr.imm) << 12;
    "
  },
  "jal": {
    "decode": "
    decodedInstr.rd = RD;
    decodedInstr.imm = bitsFrom(decodedBits,  31,  31) << 20
                          | bitsFrom(decodedBits, 19, 12) << 12
                          | bitsFrom(decodedBits, 20, 20) << 11
                          | bitsFrom(decodedBits, 30, 21) << 1;
    ",
    "execute": "
    core.regs[instr.rd] = core.pc_reg + 4;
    core.pc_reg += sext<21>(instr.imm);
    "
  },
  "jalr": {
    "decode": "
    decodedInstr.rd = RD;
    decodedInstr.rs1 = RS1;
    decodedInstr.imm = IMM12;
    ",
    "execute": "
    core.regs[instr.rd] = core.pc_reg + 4;
    core.pc_reg = (core.regs[instr.rs1] + sext<12>(instr.imm)) &  ~1U;
    "
  },
  "beq": {
    "decode": "
    decodedInstr.rs1 = RS1;
    decodedInstr.rs2 = RS2;
    decodedInstr.imm = bitsFrom(decodedBits, 7, 7) << 11
                        | bitsFrom(decodedBits, 11, 8) << 1
                        | bitsFrom(decodedBits, 30, 25) << 5
                        | bitsFrom(decodedBits, 31, 31) << 12;
    ",
    "execute": "
    core.pc_reg += (core.regs[instr.rs1] == core.regs[instr.rs2])? sext<13>(instr.imm) : 0U;
    "
  },
  "bne": {
    "decode": "
    decodedInstr.rs1 = RS1;
    decodedInstr.rs2 = RS2;
    decodedInstr.imm = bitsFrom(decodedBits, 7, 7) << 11
                        | bitsFrom(decodedBits, 11, 8) << 1
                        | bitsFrom(decodedBits, 30, 25) << 5
                        | bitsFrom(decodedBits, 31, 31) << 12;
    ",
    "execute": "
    core.pc_reg += (core.regs[instr.rs1] != core.regs[instr.rs2])? sext<13>(instr.imm) : 0U;
    "
  },
  "blt": {
    "decode": "
    decodedInstr.rs1 = RS1;
    decodedInstr.rs2 = RS2;
    decodedInstr.imm = bitsFrom(decodedBits, 7, 7) << 11
                        | bitsFrom(decodedBits, 11, 8) << 1
                        | bitsFrom(decodedBits, 30, 25) << 5
                        | bitsFrom(decodedBits, 31, 31) << 12;
    ",
    "execute": "
    core.pc_reg += (asSigned(core.regs[instr.rs1]) < asSigned(core.regs[instr.rs2]))? sext<13>(instr.imm) : 0U;
    "
  },
  "bge": {
    "decode": "
    decodedInstr.rs1 = RS1;
    decodedInstr.rs2 = RS2;
    decodedInstr.imm = bitsFrom(decodedBits, 7, 7) << 11
                        | bitsFrom(decodedBits, 11, 8) << 1
                        | bitsFrom(decodedBits, 30, 25) << 5
                        | bitsFrom(decodedBits, 31, 31) << 12;
    ",
    "execute": "
    core.pc_reg += (asSigned(core.regs[instr.rs1]) >= asSigned(core.regs[instr.rs2]))? sext<13>(instr.imm) : 0U;
    "
  },
  "bltu": {
    "decode": "
    decodedInstr.rs1 = RS1;
    decodedInstr.rs2 = RS2;
    decodedInstr.imm = bitsFrom(decodedBits, 7, 7) << 11
                        | bitsFrom(decodedBits, 11, 8) << 1
                        | bitsFrom(decodedBits, 30, 25) << 5
                        | bitsFrom(decodedBits, 31, 31) << 12;
    ",
    "execute": "
    core.pc_reg += (core.regs[instr.rs1] < core.regs[instr.rs2])? sext<13>(instr.imm) : 0U;
    "
  },
  "bgeu": {
    "decode": "
    decodedInstr.rs1 = RS1;
    decodedInstr.rs2 = RS2;
    decodedInstr.imm = bitsFrom(decodedBits, 7, 7) << 11
                        | bitsFrom(decodedBits, 11, 8) << 1
                        | bitsFrom(decodedBits, 30, 25) << 5
                        | bitsFrom(decodedBits, 31, 31) << 12;
    ",
    "execute": "
    core.pc_reg += (core.regs[instr.rs1] >= core.regs[instr.rs2])? sext<13>(instr.imm) : 0U;
    "
  },
  "lb": {
    "decode": "
    decodedInstr.rs1 = RS1;
    decodedInstr.rd = RD;
    decodedInstr.imm = IMM12;
    ",
    "execute": "
    core.regs[instr.rd] = sext<8>(
                              bitsFrom(core.mem.load<uint64_t>(core.regs[instr.rs1] + sext<12>(instr.imm)), 7, 0)
                            );
    "
  },
  "lh": {
    "decode": "
    decodedInstr.rs1 = RS1;
    decodedInstr.rd = RD;
    decodedInstr.imm = IMM12;
    ",
    "execute": "
    core.regs[instr.rd] = sext<16>(
                              bitsFrom(core.mem.load<uint64_t>(core.regs[instr.rs1] + sext<12>(instr.imm)), 15, 0)
                            );
    "
  },
  "lw": {
    "decode": "
    decodedInstr.rs1 = RS1;
    decodedInstr.rd = RD;
    decodedInstr.imm = IMM12;
    ",
    "execute": "
    core.regs[instr.rd] = sext<32>(
                              bitsFrom(core.mem.load<uint64_t>(core.regs[instr.rs1] + sext<12>(instr.imm)), 31, 0)
                            );
    "
  },
  "ld": {
    "decode": "
    decodedInstr.rs1 = RS1;
    decodedInstr.rd = RD;
    decodedInstr.imm = IMM12;
    ",
    "execute": "
    core.regs[instr.rd] = core.mem.load<uint64_t>(core.regs[instr.rs1] + sext<12>(instr.imm));
    "
  },
  "lbu": {
    "decode": "
    decodedInstr.rs1 = RS1;
    decodedInstr.rd = RD;
    decodedInstr.imm = IMM12;
    ",
    "execute": "
    core.regs[instr.rd] = bitsFrom(core.mem.load<uint64_t>(core.regs[instr.rs1] + sext<12>(instr.imm)), 7, 0);
    "
  },
  "lhu": {
    "decode": "
    decodedInstr.rs1 = RS1;
    decodedInstr.rd = RD;
    decodedInstr.imm = IMM12;
    ",
    "execute": "
    core.regs[instr.rd] = bitsFrom(core.mem.load<uint64_t>(core.regs[instr.rs1] + sext<12>(instr.imm)), 15, 0);
    "
  },
  "sb": {
    "decode": "
    decodedInstr.rs1 = RS1;
    decodedInstr.rs2 = RS2;
    decodedInstr.imm = IMM12HI << 5 | IMM12LO;
    ",
    "execute": "
    core.mem.store<uint8_t>(core.regs[instr.rs1] + sext<12>(instr.imm), bitsFrom(core.regs[instr.rs2], 7, 0));
    "
  },
  "sh": {
    "decode": "
    decodedInstr.rs1 = RS1;
    decodedInstr.rs2 = RS2;
    decodedInstr.imm = IMM12HI << 5 | IMM12LO;
    ",
    "execute": "
    core.mem.store<uint16_t>(core.regs[instr.rs1] + sext<12>(instr.imm), bitsFrom(core.regs[instr.rs2], 15, 0));
    "
  },
  "sw": {
    "decode": "
    decodedInstr.rs1 = RS1;
    decodedInstr.rs2 = RS2;
    decodedInstr.imm = IMM12HI << 5 | IMM12LO;
    ",
    "execute": "
    core.mem.store<uint32_t>(core.regs[instr.rs1] + sext<12>(instr.imm), bitsFrom(core.regs[instr.rs2], 31, 0));
    "
  },
  "sd": {
    "decode": "
    decodedInstr.rs1 = RS1;
    decodedInstr.rs2 = RS2;
    decodedInstr.imm = IMM12HI << 5 | IMM12LO;
    ",
    "execute": "
    core.mem.store<uint64_t>(core.regs[instr.rs1] + sext<12>(instr.imm), bitsFrom(core.regs[instr.rs2], 63, 0));
    "
  },
  "addi": {
    "decode": "
      decodedInstr.imm = IMM12;
      decodedInstr.rs1 = RS1;
      decodedInstr.rd = RD;
    ",
    "execute": "
    core.regs[instr.rd] = core.regs[instr.rs1] + sext<12>(instr.imm);
    "
  },
  "slti": {
    "decode": "
      decodedInstr.imm = IMM12;
      decodedInstr.rs1 = RS1;
      decodedInstr.rd = RD;
    ",
    "execute": "
    core.regs[instr.rd] = asSigned(core.regs[instr.rs1]) < asSigned(sext<12>(instr.imm));
    "
  },
  "sltiu": {
    "decode": "
      decodedInstr.imm = IMM12;
      decodedInstr.rs1 = RS1;
      decodedInstr.rd = RD;
    ",
    "execute": "
    core.regs[instr.rd] = core.regs[instr.rs1] < sext<12>(instr.imm);
    "
  },
  "xori": {
    "decode": "
      decodedInstr.imm = IMM12;
      decodedInstr.rs1 = RS1;
      decodedInstr.rd = RD;
    ",
    "execute": "
    core.regs[instr.rd] = core.regs[instr.rs1] ^ sext<12>(instr.imm);
    "
  },
  "ori": {
    "decode": "
      decodedInstr.imm = IMM12;
      decodedInstr.rs1 = RS1;
      decodedInstr.rd = RD;
    ",
    "execute": "
    core.regs[instr.rd] = core.regs[instr.rs1] | sext<12>(instr.imm);
    "
  },
  "andi": {
    "decode": "
      decodedInstr.imm = IMM12;
      decodedInstr.rs1 = RS1;
      decodedInstr.rd = RD;
    ",
    "execute": "
    core.regs[instr.rd] = core.regs[instr.rs1] & sext<12>(instr.imm);
    "
  },
  "add": {
    "decode": "
      decodedInstr.rs1 = RS1;
      decodedInstr.rs2 = RS2;
      decodedInstr.rd = RD;
    ",
    "execute": "
    core.regs[instr.rd] = core.regs[instr.rs1] + core.regs[instr.rs2];
    "
  },
  "sub": {
    "decode": "
      decodedInstr.rs1 = RS1;
      decodedInstr.rs2 = RS2;
      decodedInstr.rd = RD;
    ",
    "execute": "
    core.regs[instr.rd] = core.regs[instr.rs1] - core.regs[instr.rs2];
    "
  },
  "sll": {
    "decode": "
      decodedInstr.rs1 = RS1;
      decodedInstr.rs2 = RS2;
      decodedInstr.rd = RD;
    ",
    "execute": "
    core.regs[instr.rd] = core.regs[instr.rs1] << core.regs[instr.rs2];
    "
  },
  "slt": {
    "decode": "
      decodedInstr.rs1 = RS1;
      decodedInstr.rs2 = RS2;
      decodedInstr.rd = RD;
    ",
    "execute": "
    core.regs[instr.rd] = asSigned(core.regs[instr.rs1]) < asSigned(core.regs[instr.rs2]);
    "
  },
  "sltu": {
    "decode": "
      decodedInstr.rs1 = RS1;
      decodedInstr.rs2 = RS2;
      decodedInstr.rd = RD;
    ",
    "execute": "
    core.regs[instr.rd] = core.regs[instr.rs1] < core.regs[instr.rs2];
    "
  },
  "xor": {
    "decode": "
      decodedInstr.rs1 = RS1;
      decodedInstr.rs2 = RS2;
      decodedInstr.rd = RD;
    ",
    "execute": "
    core.regs[instr.rd] = core.regs[instr.rs1] ^ core.regs[instr.rs2];
    "
  },
  "srl": {
    "decode": "
      decodedInstr.rs1 = RS1;
      decodedInstr.rs2 = RS2;
      decodedInstr.rd = RD;
    ",
    "execute": "
    core.regs[instr.rd] = core.regs[instr.rs1] >> core.regs[instr.rs2];
    "
  },
  "sra": {
    "decode": "
      decodedInstr.rs1 = RS1;
      decodedInstr.rs2 = RS2;
      decodedInstr.rd = RD;
    ",
    "execute": "
    core.regs[instr.rd] = asSigned(core.regs[instr.rs1]) >> core.regs[instr.rs2];
    "
  },
  "or": {
    "decode": "
      decodedInstr.rs1 = RS1;
      decodedInstr.rs2 = RS2;
      decodedInstr.rd = RD;
    ",
    "execute": "
    core.regs[instr.rd] = core.regs[instr.rs1] | core.regs[instr.rs2];
    "
  },
  "and": {
    "decode": "
      decodedInstr.rs1 = RS1;
      decodedInstr.rs2 = RS2;
      decodedInstr.rd = RD;
    ",
    "execute": "
    core.regs[instr.rd] = core.regs[instr.rs1] & core.regs[instr.rs2];
    "
  },
  "fence": {},
  "ecall": {},
  "ebreak": {},
  "addiw": {
    "decode": "
      decodedInstr.imm = IMM12;
      decodedInstr.rs1 = RS1;
      decodedInstr.rd = RD;
    ",
    "execute": "
    core.regs[instr.rd] = sext<32>(bitsFrom(core.regs[instr.rs1] + sext<12>(instr.imm), 31, 0));
    "
  },
  "addw": {
    "decode": "
      decodedInstr.rs2 = RS2;
      decodedInstr.rs1 = RS1;
      decodedInstr.rd = RD;
    ",
    "execute": "
    core.regs[instr.rd] = sext<32>(bitsFrom(core.regs[instr.rs1] + core.regs[instr.rs2], 31, 0));
    "
  }
}